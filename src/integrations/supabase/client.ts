
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://sxigocnatqgqgiedrgue.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN4aWdvY25hdHFncWdpZWRyZ3VlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUyNTY1ODgsImV4cCI6MjA2MDgzMjU4OH0.JaRFyEuVOC9VXoPFc7ohO77F1qM_NwY_jOgNcSacfp4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Creates a user record in the users table
 * @param userId The ID of the user from Supabase Auth
 * @param userData Additional user data to be stored
 */
export async function createUserRecord(userId: string, userData: {
  Name?: string;
  Email: string;
  Password: string;
  Phone?: string;
  Country?: string;
  Activate?: string;
  Block?: string;
  Credits?: string;
  User_Type?: string;
  Email_Type?: string;
  Expiry_Time?: string;
  Start_Date?: string;
  Hwid?: string;
  UID?: string;
}) {
  // Map the old field names to the new Supabase schema
  const { error } = await supabase
    .from('users')
    .insert({
      id: userId,
      uid: userData.UID || userId,
      name: userData.Name || '',
      email: userData.Email,
      password: userData.Password, // Note: In production, passwords should be handled by Supabase Auth, not stored in the users table
      phone: userData.Phone || null,
      country: userData.Country || null,
      activate: userData.Activate || 'Active',
      block: userData.Block || 'Not Blocked',
      credits: userData.Credits || '0.0',
      user_type: userData.User_Type || 'Monthly License',
      email_type: userData.Email_Type || 'User',
      expiry_time: userData.Expiry_Time || null,
      start_date: userData.Start_Date || new Date().toISOString(),
      hwid: userData.Hwid || 'Null'
    });

  if (error) {
    console.error('Error creating user record:', error);
    throw new Error(`Failed to create user record: ${error.message}`);
  }

  return userId;
}

/**
 * Fetches user information by user ID
 * @param userId The ID of the user
 * @returns User data or null if not found
 */
export async function getUserInfo(userId: string) {
  const { data, error } = await supabase
    .from('users')
    .select('*')
    .eq('id', userId)
    .single();
  
  if (error) {
    console.error('Error fetching user info:', error);
    return null;
  }
  
  return data;
}
